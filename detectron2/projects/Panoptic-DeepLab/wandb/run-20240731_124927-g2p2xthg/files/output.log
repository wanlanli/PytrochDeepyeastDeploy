[32m[07/31 12:49:31 d2.engine.defaults]: [39mModel:
PanopticDeepLab(
  (backbone): ResNet(
    (stem): DeepLabStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (conv2): Conv2d(
        64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (conv3): Conv2d(
        64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(8, 8), dilation=(8, 8), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (sem_seg_head): PanopticDeepLabSemSegHead(
    (decoder): ModuleDict(
      (res2): ModuleDict(
        (project_conv): Conv2d(
          256, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            288, 288, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=288, bias=False
            (norm): SyncBatchNorm(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            288, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res3): ModuleDict(
        (project_conv): Conv2d(
          512, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            320, 320, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=320, bias=False
            (norm): SyncBatchNorm(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            320, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res5): ModuleDict(
        (project_conv): ASPP(
          (convs): ModuleList(
            (0): Conv2d(
              2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(6, 6), dilation=(6, 6), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(18, 18), dilation=(18, 18), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Sequential(
              (0): AvgPool2d(kernel_size=(20, 20), stride=1, padding=0)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (project): Conv2d(
            1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (fuse_conv): None
      )
    )
    (head): DepthwiseSeparableConv2d(
      (depthwise): Conv2d(
        256, 256, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=256, bias=False
        (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (pointwise): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (predictor): Conv2d(256, 8, kernel_size=(1, 1), stride=(1, 1))
    (loss): DeepLabCE(
      (criterion): CrossEntropyLoss()
    )
  )
  (ins_embed_head): PanopticDeepLabInsEmbedHead(
    (decoder): ModuleDict(
      (res2): ModuleDict(
        (project_conv): Conv2d(
          256, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            160, 160, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=160, bias=False
            (norm): SyncBatchNorm(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res3): ModuleDict(
        (project_conv): Conv2d(
          512, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            320, 320, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=320, bias=False
            (norm): SyncBatchNorm(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res5): ModuleDict(
        (project_conv): ASPP(
          (convs): ModuleList(
            (0): Conv2d(
              2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(6, 6), dilation=(6, 6), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(18, 18), dilation=(18, 18), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Sequential(
              (0): AvgPool2d(kernel_size=(20, 20), stride=1, padding=0)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (project): Conv2d(
            1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (fuse_conv): None
      )
    )
    (center_head): Sequential(
      (0): Conv2d(
        128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): Conv2d(
        128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): SyncBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (center_predictor): Conv2d(32, 1, kernel_size=(1, 1), stride=(1, 1))
    (offset_head): DepthwiseSeparableConv2d(
      (depthwise): Conv2d(
        128, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=128, bias=False
        (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (pointwise): Conv2d(
        128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): SyncBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (offset_predictor): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
    (center_loss): MSELoss()
    (offset_loss): L1Loss()
  )
)
[32m[07/31 12:49:31 d2.projects.panoptic_deeplab.dataset_mapper]: [39mAugmentations used in training: [ResizeShortestEdge(short_edge_length=(160, 192, 224, 256, 288, 320, 352, 384, 416, 448, 480), max_size=640, sample_style='choice'), RandomCrop(crop_type='absolute', crop_size=[320, 320]), RandomFlip()]
[32m[07/31 12:49:31 d2.data.build]: [39mRemoved 0 images with no usable annotations. 100 images left.
[32m[07/31 12:49:31 d2.data.build]: [39mDistribution of instances among all 8 categories:
[36m|  category  | #instances   |  category  | #instances   |  category  | #instances   |
[36m|:----------:|:-------------|:----------:|:-------------|:----------:|:-------------|
[36m|   cell1    | 5175         |   cell2    | 355          |   cell3    | 434          |
[36m|   tetrad   | 1584         |   cell5    | 30           |   cell6    | 21           |
[36m|   cell7    | 4            |   cell8    | 1            |            |              |
[36m|   total    | 7604         |            |              |            |              |
[32m[07/31 12:49:31 d2.data.build]: [39mUsing training sampler TrainingSampler
[32m[07/31 12:49:31 d2.data.common]: [39mSerializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[32m[07/31 12:49:31 d2.data.common]: [39mSerializing 100 elements to byte tensors and concatenating them all ...
[32m[07/31 12:49:31 d2.data.common]: [39mSerialized dataset takes 7.79 MiB
[32m[07/31 12:49:31 d2.data.build]: [39mMaking batched data loader with batch_size=16
[32m[07/31 12:49:31 d2.checkpoint.detection_checkpoint]: [39m[DetectionCheckpointer] Loading from detectron2://DeepLab/R-52.pkl ...
[32m[07/31 12:49:31 fvcore.common.checkpoint]: [39m[Checkpointer] Loading from /home/liwa/.torch/iopath_cache/detectron2/DeepLab/R-52.pkl ...
[32m[07/31 12:49:31 fvcore.common.checkpoint]: [39mReading a file from 'torchvision'
[32m[07/31 12:49:31 d2.checkpoint.c2_model_loading]: [39mFollowing weights matched with submodule backbone - Total num: 55
[31m[5mWARNING[39m[25m [32m[07/31 12:49:31 fvcore.common.checkpoint]: [39mSome model parameters or buffers are not found in the checkpoint:
[34mins_embed_head.center_head.0.norm.{bias, running_mean, running_var, weight}
[34mins_embed_head.center_head.0.weight
[34mins_embed_head.center_head.1.norm.{bias, running_mean, running_var, weight}
[34mins_embed_head.center_head.1.weight
[34mins_embed_head.center_predictor.{bias, weight}
[34mins_embed_head.decoder.res2.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}
[34mins_embed_head.decoder.res2.fuse_conv.depthwise.weight
[34mins_embed_head.decoder.res2.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}
[34mins_embed_head.decoder.res2.fuse_conv.pointwise.weight
[34mins_embed_head.decoder.res2.project_conv.norm.{bias, running_mean, running_var, weight}
[34mins_embed_head.decoder.res2.project_conv.weight
[34mins_embed_head.decoder.res3.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}
[34mins_embed_head.decoder.res3.fuse_conv.depthwise.weight
[34mins_embed_head.decoder.res3.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}
[34mins_embed_head.decoder.res3.fuse_conv.pointwise.weight
[34mins_embed_head.decoder.res3.project_conv.norm.{bias, running_mean, running_var, weight}
[34mins_embed_head.decoder.res3.project_conv.weight
[34mins_embed_head.decoder.res5.project_conv.convs.0.norm.{bias, running_mean, running_var, weight}
[34mins_embed_head.decoder.res5.project_conv.convs.0.weight
[34mins_embed_head.decoder.res5.project_conv.convs.1.depthwise.norm.{bias, running_mean, running_var, weight}
[34mins_embed_head.decoder.res5.project_conv.convs.1.depthwise.weight
[34mins_embed_head.decoder.res5.project_conv.convs.1.pointwise.norm.{bias, running_mean, running_var, weight}
[34mins_embed_head.decoder.res5.project_conv.convs.1.pointwise.weight
[34mins_embed_head.decoder.res5.project_conv.convs.2.depthwise.norm.{bias, running_mean, running_var, weight}
[34mins_embed_head.decoder.res5.project_conv.convs.2.depthwise.weight
[34mins_embed_head.decoder.res5.project_conv.convs.2.pointwise.norm.{bias, running_mean, running_var, weight}
[34mins_embed_head.decoder.res5.project_conv.convs.2.pointwise.weight
[34mins_embed_head.decoder.res5.project_conv.convs.3.depthwise.norm.{bias, running_mean, running_var, weight}
[34mins_embed_head.decoder.res5.project_conv.convs.3.depthwise.weight
[34mins_embed_head.decoder.res5.project_conv.convs.3.pointwise.norm.{bias, running_mean, running_var, weight}
[34mins_embed_head.decoder.res5.project_conv.convs.3.pointwise.weight
[34mins_embed_head.decoder.res5.project_conv.convs.4.1.{bias, weight}
[34mins_embed_head.decoder.res5.project_conv.project.norm.{bias, running_mean, running_var, weight}
[34mins_embed_head.decoder.res5.project_conv.project.weight
[34mins_embed_head.offset_head.depthwise.norm.{bias, running_mean, running_var, weight}
[34mins_embed_head.offset_head.depthwise.weight
[34mins_embed_head.offset_head.pointwise.norm.{bias, running_mean, running_var, weight}
[34mins_embed_head.offset_head.pointwise.weight
[34mins_embed_head.offset_predictor.{bias, weight}
[34msem_seg_head.decoder.res2.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}
[34msem_seg_head.decoder.res2.fuse_conv.depthwise.weight
[34msem_seg_head.decoder.res2.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}
[34msem_seg_head.decoder.res2.fuse_conv.pointwise.weight
[34msem_seg_head.decoder.res2.project_conv.norm.{bias, running_mean, running_var, weight}
[34msem_seg_head.decoder.res2.project_conv.weight
[34msem_seg_head.decoder.res3.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}
[34msem_seg_head.decoder.res3.fuse_conv.depthwise.weight
[34msem_seg_head.decoder.res3.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}
[34msem_seg_head.decoder.res3.fuse_conv.pointwise.weight
[34msem_seg_head.decoder.res3.project_conv.norm.{bias, running_mean, running_var, weight}
[34msem_seg_head.decoder.res3.project_conv.weight
[34msem_seg_head.decoder.res5.project_conv.convs.0.norm.{bias, running_mean, running_var, weight}
[34msem_seg_head.decoder.res5.project_conv.convs.0.weight
[34msem_seg_head.decoder.res5.project_conv.convs.1.depthwise.norm.{bias, running_mean, running_var, weight}
[34msem_seg_head.decoder.res5.project_conv.convs.1.depthwise.weight
[34msem_seg_head.decoder.res5.project_conv.convs.1.pointwise.norm.{bias, running_mean, running_var, weight}
[34msem_seg_head.decoder.res5.project_conv.convs.1.pointwise.weight
[34msem_seg_head.decoder.res5.project_conv.convs.2.depthwise.norm.{bias, running_mean, running_var, weight}
[34msem_seg_head.decoder.res5.project_conv.convs.2.depthwise.weight
[34msem_seg_head.decoder.res5.project_conv.convs.2.pointwise.norm.{bias, running_mean, running_var, weight}
[34msem_seg_head.decoder.res5.project_conv.convs.2.pointwise.weight
[34msem_seg_head.decoder.res5.project_conv.convs.3.depthwise.norm.{bias, running_mean, running_var, weight}
[34msem_seg_head.decoder.res5.project_conv.convs.3.depthwise.weight
[34msem_seg_head.decoder.res5.project_conv.convs.3.pointwise.norm.{bias, running_mean, running_var, weight}
[34msem_seg_head.decoder.res5.project_conv.convs.3.pointwise.weight
[34msem_seg_head.decoder.res5.project_conv.convs.4.1.{bias, weight}
[34msem_seg_head.decoder.res5.project_conv.project.norm.{bias, running_mean, running_var, weight}
[34msem_seg_head.decoder.res5.project_conv.project.weight
[34msem_seg_head.head.depthwise.norm.{bias, running_mean, running_var, weight}
[34msem_seg_head.head.depthwise.weight
[34msem_seg_head.head.pointwise.norm.{bias, running_mean, running_var, weight}
[34msem_seg_head.head.pointwise.weight
[34msem_seg_head.predictor.{bias, weight}
[31m[5mWARNING[39m[25m [32m[07/31 12:49:31 fvcore.common.checkpoint]: [39mThe checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}
[32m[07/31 12:49:31 d2.engine.train_loop]: [39mStarting training from iteration 0
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
dict_keys(['sem_seg', 'center', 'center_points', 'offset', 'sem_seg_weights', 'center_weights', 'offset_weights'])
